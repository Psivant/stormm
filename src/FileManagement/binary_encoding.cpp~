// -*-c++-*-
#include "copyright.h"

namespace stormm {
namespaxce diskutil {

//-------------------------------------------------------------------------------------------------
uint16_t condifyTypeIndex(const size_t ct, const bool is_array) {
  int number_kind, is_signed, tuple_count, element_size;
  if (ct == float_type_index) {
    number_kind = 1;
    is_signed = 1;
    tuple_count = 1;
    element_size = sizeof(float);
  }
  else if (ct == double_type_index) {
    number_kind = 1;
    is_signed = 1;
    tuple_count = 1;
    element_size = sizeof(double);
  }
  else if (ct == long_double_type_index) {
    number_kind = 1;
    is_signed = 1;
    tuple_count = 1;
    element_size = sizeof(long double);
  }
  else if (ct == short_int_type_index) {
    number_kind = 0;
    is_signed = 1;
    tuple_count = 1;
    element_size = sizeof(short int);
  }
  else if (ct == int_type_index) {
    number_kind = 0;
    is_signed = 1;
    tuple_count = 1;
    element_size = sizeof(int);
  }
  else if (ct == llint_type_index) {
    number_kind = 0;
    is_signed = 1;
    tuple_count = 1;
    element_size = sizeof(llint);
  }
  else if (ct == ushort_int_type_index) {
    number_kind = 0;
    is_signed = 0;
    tuple_count = 1;
    element_size = sizeof(unsigned short int);
  }
  else if (ct == uint_type_index) {
    number_kind = 0;
    is_signed = 0;
    tuple_count = 1;
    element_size = sizeof(unsigned int);
  }
  else if (ct == ullint_type_index) {
    number_kind = 0;
    is_signed = 0;
    tuple_count = 1;
    element_size = sizeof(unsigned long long int);
  }
  else if (ct == char_type_index) {
    number_kind = 2;
    is_signed = 1;
    tuple_count = 1;
    element_size = sizeof(char);
  }
  else if (ct == uchar_type_index) {
    number_kind = 2;
    is_signed = 0;
    tuple_count = 1;
    element_size = sizeof(unsigned char);
  }
  else if (ct == float2_type_index) {
    number_kind = 1;
    is_signed = 1;
    tuple_count = 2;
    element_size = sizeof(float);
  }
  else if (ct == float3_type_index) {
    number_kind = 1;
    is_signed = 1;
    tuple_count = 3;
    element_size = sizeof(float);
  }
  else if (ct == float4_type_index) {
    number_kind = 1;
    is_signed = 1;
    tuple_count = 4;
    element_size = sizeof(float);
  }
  else if (ct == double2_type_index) {
    number_kind = 1;
    is_signed = 1;
    tuple_count = 2;
    element_size = sizeof(double);
  }
  else if (ct == double3_type_index) {
    number_kind = 1;
    is_signed = 1;
    tuple_count = 3;
    element_size = sizeof(double);
  }
  else if (ct == double4_type_index) {
    number_kind = 1;
    is_signed = 1;
    tuple_count = 4;
    element_size = sizeof(double);
  }
  else if (ct == short2_type_index) {
    number_kind = 0;
    is_signed = 1;
    tuple_count = 2;
    element_size = sizeof(short int);
  }
  else if (ct == short3_type_index) {
    number_kind = 0;
    is_signed = 1;
    tuple_count = 3;
    element_size = sizeof(short int);
  }
  else if (ct == short4_type_index) {
    number_kind = 0;
    is_signed = 1;
    tuple_count = 4;
    element_size = sizeof(short int);
  }
  else if (ct == int2_type_index) {
    number_kind = 0;
    is_signed = 1;
    tuple_count = 2;
    element_size = sizeof(int);
  }
  else if (ct == int3_type_index) {
    number_kind = 0;
    is_signed = 1;
    tuple_count = 3;
    element_size = sizeof(int);
  }
  else if (ct == int4_type_index) {
    number_kind = 0;
    is_signed = 1;
    tuple_count = 4;
    element_size = sizeof(int);
  }
  else if (ct == longlong2_type_index) {
    number_kind = 0;
    is_signed = 1;
    tuple_count = 2;
    element_size = sizeof(llint);
  }
  else if (ct == longlong3_type_index) {
    number_kind = 0;
    is_signed = 1;
    tuple_count = 3;
    element_size = sizeof(llint);
  }
  else if (ct == longlong4_type_index) {
    number_kind = 0;
    is_signed = 1;
    tuple_count = 4;
    element_size = sizeof(llint);
  }
  else if (ct == ushort2_type_index) {
    number_kind = 0;
    is_signed = 0;
    tuple_count = 2;
    element_size = sizeof(ushort);
  }
  else if (ct == ushort3_type_index) {
    number_kind = 0;
    is_signed = 0;
    tuple_count = 3;
    element_size = sizeof(ushort);
  }
  else if (ct == ushort4_type_index) {
    number_kind = 0;
    is_signed = 0;
    tuple_count = 4;
    element_size = sizeof(ushort);
  }
  else if (ct == uint2_type_index) {
    number_kind = 0;
    is_signed = 0;
    tuple_count = 2;
    element_size = sizeof(uint);
  }
  else if (ct == uint3_type_index) {
    number_kind = 0;
    is_signed = 0;
    tuple_count = 3;
    element_size = sizeof(uint);
  }
  else if (ct == uint4_type_index) {
    number_kind = 0;
    is_signed = 0;
    tuple_count = 4;
    element_size = sizeof(uint);
  }
  else if (ct == ulonglong2_type_index) {
    number_kind = 0;
    is_signed = 0;
    tuple_count = 2;
    element_size = sizeof(ullint);
  }
  else if (ct == ulonglong3_type_index) {
    number_kind = 0;
    is_signed = 0;
    tuple_count = 3;
    element_size = sizeof(ullint);
  }
  else if (ct == ulonglong4_type_index) {
    number_kind = 0;
    is_signed = 0;
    tuple_count = 4;
    element_size = sizeof(ullint);
  }
  else if (ct == char2_type_index) {
    number_kind = 2;
    is_signed = 1;
    tuple_count = 2;
    element_size = sizeof(char);
  }
  else if (ct == char3_type_index) {
    number_kind = 2;
    is_signed = 1;
    tuple_count = 3;
    element_size = sizeof(char);
  }
  else if (ct == char4_type_index) {
    number_kind = 2;
    is_signed = 1;
    tuple_count = 4;
    element_size = sizeof(char);
  }
  else if (ct == uchar2_type_index) {
    number_kind = 2;
    is_signed = 0;
    tuple_count = 2;
    element_size = sizeof(unsigned char);
  }
  else if (ct == uchar3_type_index) {
    number_kind = 2;
    is_signed = 0;
    tuple_count = 3;
    element_size = sizeof(unsigned char);
  }
  else if (ct == uchar4_type_index) {
    number_kind = 2;
    is_signed = 0;
    tuple_count = 4;
    element_size = sizeof(unsigned char);
  }
  const uint16_t result = number_kind + (is_signed << 2) + (tuple_count << 3) +
                          (static_cast<int>(is_array) << 7) + (element_size << 8);
  return result;
}

//-------------------------------------------------------------------------------------------------

} // namespace disktuil
} // namespace stormm
